//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ODataWebApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
			: base("name=TestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AlarmData> AlarmData { get; set; }
        public virtual DbSet<ApprovalHistory> ApprovalHistory { get; set; }
        public virtual DbSet<BatchEquipmentRequirement> BatchEquipmentRequirement { get; set; }
        public virtual DbSet<BatchInformation> BatchInformation { get; set; }
        public virtual DbSet<BatchList> BatchList { get; set; }
        public virtual DbSet<BatchListEntry> BatchListEntry { get; set; }
        public virtual DbSet<BatchOtherInformation> BatchOtherInformation { get; set; }
        public virtual DbSet<BatchParameter> BatchParameter { get; set; }
        public virtual DbSet<BatchProductionRecord> BatchProductionRecord { get; set; }
        public virtual DbSet<BatchProductionRecordEntry> BatchProductionRecordEntry { get; set; }
        public virtual DbSet<BatchSize> BatchSize { get; set; }
        public virtual DbSet<BatchValue> BatchValue { get; set; }
        public virtual DbSet<Change> Change { get; set; }
        public virtual DbSet<ClassInstanceAssociation> ClassInstanceAssociation { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<Constraint> Constraint { get; set; }
        public virtual DbSet<ConsumableActual> ConsumableActual { get; set; }
        public virtual DbSet<ConsumableActualProperty> ConsumableActualProperty { get; set; }
        public virtual DbSet<ConsumableExpectedRequirement> ConsumableExpectedRequirement { get; set; }
        public virtual DbSet<ConsumableExpectedRequirementProperty> ConsumableExpectedRequirementProperty { get; set; }
        public virtual DbSet<ControlRecipe> ControlRecipe { get; set; }
        public virtual DbSet<ControlRecipeRecord> ControlRecipeRecord { get; set; }
        public virtual DbSet<DataSet> DataSet { get; set; }
        public virtual DbSet<DataValue> DataValue { get; set; }
        public virtual DbSet<DelimitedDataBlock> DelimitedDataBlock { get; set; }
        public virtual DbSet<DirectedLink> DirectedLink { get; set; }
        public virtual DbSet<Enumeration> Enumeration { get; set; }
        public virtual DbSet<EnumerationSet> EnumerationSet { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<EquipmentActual> EquipmentActual { get; set; }
        public virtual DbSet<EquipmentActualProperty> EquipmentActualProperty { get; set; }
        public virtual DbSet<EquipmentCapability> EquipmentCapability { get; set; }
        public virtual DbSet<EquipmentCapabilityProperty> EquipmentCapabilityProperty { get; set; }
        public virtual DbSet<EquipmentCapabilityTestSpecification> EquipmentCapabilityTestSpecification { get; set; }
        public virtual DbSet<EquipmentClass> EquipmentClass { get; set; }
        public virtual DbSet<EquipmentClassProperty> EquipmentClassProperty { get; set; }
        public virtual DbSet<EquipmentConnection> EquipmentConnection { get; set; }
        public virtual DbSet<EquipmentElement> EquipmentElement { get; set; }
        public virtual DbSet<EquipmentElementProperty> EquipmentElementProperty { get; set; }
        public virtual DbSet<EquipmentProoceduralElement> EquipmentProoceduralElement { get; set; }
        public virtual DbSet<EquipmentProoceduralElementClass> EquipmentProoceduralElementClass { get; set; }
        public virtual DbSet<EquipmentProperty> EquipmentProperty { get; set; }
        public virtual DbSet<EquipmentRequirement> EquipmentRequirement { get; set; }
        public virtual DbSet<EquipmentRequirementProperty> EquipmentRequirementProperty { get; set; }
        public virtual DbSet<EquipmentSegmentSpecification> EquipmentSegmentSpecification { get; set; }
        public virtual DbSet<EquipmentSegmentSpecificationProperty> EquipmentSegmentSpecificationProperty { get; set; }
        public virtual DbSet<EquipmentSpecification> EquipmentSpecification { get; set; }
        public virtual DbSet<EquipmentSpecificationProperty> EquipmentSpecificationProperty { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<Files> Files { get; set; }
        public virtual DbSet<Formula> Formula { get; set; }
        public virtual DbSet<FromID> FromID { get; set; }
        public virtual DbSet<GRecipe> GRecipe { get; set; }
        public virtual DbSet<GRecipeFormula> GRecipeFormula { get; set; }
        public virtual DbSet<GRecipeHeader> GRecipeHeader { get; set; }
        public virtual DbSet<GRecipeInformation> GRecipeInformation { get; set; }
        public virtual DbSet<GRecipeMaterial> GRecipeMaterial { get; set; }
        public virtual DbSet<GRecipeMaterials> GRecipeMaterials { get; set; }
        public virtual DbSet<GRecipeProductInformation> GRecipeProductInformation { get; set; }
        public virtual DbSet<Header> Header { get; set; }
        public virtual DbSet<HeaderProperty> HeaderProperty { get; set; }
        public virtual DbSet<HierarchyScope> HierarchyScope { get; set; }
        public virtual DbSet<Individualapproval> Individualapproval { get; set; }
        public virtual DbSet<JobList> JobList { get; set; }
        public virtual DbSet<JobOrder> JobOrder { get; set; }
        public virtual DbSet<JobResponse> JobResponse { get; set; }
        public virtual DbSet<JobResponsetData> JobResponsetData { get; set; }
        public virtual DbSet<KEP_logger> KEP_logger { get; set; }
        public virtual DbSet<KPIDefinition> KPIDefinition { get; set; }
        public virtual DbSet<KPIDefinitionProperty> KPIDefinitionProperty { get; set; }
        public virtual DbSet<KPIDefinitionTimeRange> KPIDefinitionTimeRange { get; set; }
        public virtual DbSet<KPIInstance> KPIInstance { get; set; }
        public virtual DbSet<KPIInstanceProperty> KPIInstanceProperty { get; set; }
        public virtual DbSet<KPIInstanceRange> KPIInstanceRange { get; set; }
        public virtual DbSet<KPIInstanceResourceReference> KPIInstanceResourceReference { get; set; }
        public virtual DbSet<KPIInstanceTimeRange> KPIInstanceTimeRange { get; set; }
        public virtual DbSet<KPIValue> KPIValue { get; set; }
        public virtual DbSet<KPIValueProperty> KPIValueProperty { get; set; }
        public virtual DbSet<KPIValueTimeRange> KPIValueTimeRange { get; set; }
        public virtual DbSet<Link> Link { get; set; }
        public virtual DbSet<ListHeader> ListHeader { get; set; }
        public virtual DbSet<ManufacturingBill> ManufacturingBill { get; set; }
        public virtual DbSet<MasterRecipe> MasterRecipe { get; set; }
        public virtual DbSet<MasterRecipeRecord> MasterRecipeRecord { get; set; }
        public virtual DbSet<MaterialActual> MaterialActual { get; set; }
        public virtual DbSet<MaterialActualProperty> MaterialActualProperty { get; set; }
        public virtual DbSet<MaterialCapability> MaterialCapability { get; set; }
        public virtual DbSet<MaterialCapabilityProperty> MaterialCapabilityProperty { get; set; }
        public virtual DbSet<MaterialClass> MaterialClass { get; set; }
        public virtual DbSet<MaterialClassProperty> MaterialClassProperty { get; set; }
        public virtual DbSet<MaterialConsumedActual> MaterialConsumedActual { get; set; }
        public virtual DbSet<MaterialConsumedActualProperty> MaterialConsumedActualProperty { get; set; }
        public virtual DbSet<MaterialConsumedRequirement> MaterialConsumedRequirement { get; set; }
        public virtual DbSet<MaterialConsumedRequirementProperty> MaterialConsumedRequirementProperty { get; set; }
        public virtual DbSet<MaterialDefinition> MaterialDefinition { get; set; }
        public virtual DbSet<MaterialDefinitionProperty> MaterialDefinitionProperty { get; set; }
        public virtual DbSet<MaterialInformation> MaterialInformation { get; set; }
        public virtual DbSet<MaterialLinkTypes> MaterialLinkTypes { get; set; }
        public virtual DbSet<MaterialLot> MaterialLot { get; set; }
        public virtual DbSet<MaterialLotProperty> MaterialLotProperty { get; set; }
        public virtual DbSet<MaterialProducedActual> MaterialProducedActual { get; set; }
        public virtual DbSet<MaterialProducedActualProperty> MaterialProducedActualProperty { get; set; }
        public virtual DbSet<MaterialProducedRequirement> MaterialProducedRequirement { get; set; }
        public virtual DbSet<MaterialProducedRequirementProperty> MaterialProducedRequirementProperty { get; set; }
        public virtual DbSet<MaterialRequirement> MaterialRequirement { get; set; }
        public virtual DbSet<MaterialRequirementProperty> MaterialRequirementProperty { get; set; }
        public virtual DbSet<MaterialSegmentSpecificationProperty> MaterialSegmentSpecificationProperty { get; set; }
        public virtual DbSet<MaterialSegmentSpecificftion> MaterialSegmentSpecificftion { get; set; }
        public virtual DbSet<MaterialSpecification> MaterialSpecification { get; set; }
        public virtual DbSet<MaterialSpecificationProperty> MaterialSpecificationProperty { get; set; }
        public virtual DbSet<MaterialSubLot> MaterialSubLot { get; set; }
        public virtual DbSet<MaterialTestSpecification> MaterialTestSpecification { get; set; }
        public virtual DbSet<ModificationLog> ModificationLog { get; set; }
        public virtual DbSet<OpEquipmentActual> OpEquipmentActual { get; set; }
        public virtual DbSet<OpEquipmentCapability> OpEquipmentCapability { get; set; }
        public virtual DbSet<OpEquipmentRequirement> OpEquipmentRequirement { get; set; }
        public virtual DbSet<OpEquipmentSpecification> OpEquipmentSpecification { get; set; }
        public virtual DbSet<OperationsCapability> OperationsCapability { get; set; }
        public virtual DbSet<OperationsCapabilityInformation> OperationsCapabilityInformation { get; set; }
        public virtual DbSet<OperationsDefinition> OperationsDefinition { get; set; }
        public virtual DbSet<OperationsDefinitionInformation> OperationsDefinitionInformation { get; set; }
        public virtual DbSet<OperationsDefinitionRecord> OperationsDefinitionRecord { get; set; }
        public virtual DbSet<OperationsMaterialBill> OperationsMaterialBill { get; set; }
        public virtual DbSet<OperationsMaterialBillItem> OperationsMaterialBillItem { get; set; }
        public virtual DbSet<OperationsPerfomance> OperationsPerfomance { get; set; }
        public virtual DbSet<OperationsPerformanceRecord> OperationsPerformanceRecord { get; set; }
        public virtual DbSet<OperationsRequest> OperationsRequest { get; set; }
        public virtual DbSet<OperationsResponse> OperationsResponse { get; set; }
        public virtual DbSet<OperationsScedule> OperationsScedule { get; set; }
        public virtual DbSet<OperationsSceduleRecord> OperationsSceduleRecord { get; set; }
        public virtual DbSet<OperationsSegment> OperationsSegment { get; set; }
        public virtual DbSet<OpMaterialActual> OpMaterialActual { get; set; }
        public virtual DbSet<OpMaterialCapability> OpMaterialCapability { get; set; }
        public virtual DbSet<OpMaterialRequirement> OpMaterialRequirement { get; set; }
        public virtual DbSet<OpMaterialSpecification> OpMaterialSpecification { get; set; }
        public virtual DbSet<OpPersonnelActual> OpPersonnelActual { get; set; }
        public virtual DbSet<OpPersonnelCapability> OpPersonnelCapability { get; set; }
        public virtual DbSet<OpPersonnelRequirement> OpPersonnelRequirement { get; set; }
        public virtual DbSet<OpPersonnelSpecification> OpPersonnelSpecification { get; set; }
        public virtual DbSet<OpPhysicalAssetActual> OpPhysicalAssetActual { get; set; }
        public virtual DbSet<OpPhysicalAssetCapability> OpPhysicalAssetCapability { get; set; }
        public virtual DbSet<OpPhysicalAssetRequirement> OpPhysicalAssetRequirement { get; set; }
        public virtual DbSet<OpPhysicalAssetSpecification> OpPhysicalAssetSpecification { get; set; }
        public virtual DbSet<OpProcessSegmentCapability> OpProcessSegmentCapability { get; set; }
        public virtual DbSet<OpSegmentData> OpSegmentData { get; set; }
        public virtual DbSet<OpSegmentRequirement> OpSegmentRequirement { get; set; }
        public virtual DbSet<OpSegmentResponse> OpSegmentResponse { get; set; }
        public virtual DbSet<OrderedData> OrderedData { get; set; }
        public virtual DbSet<OtherInformation> OtherInformation { get; set; }
        public virtual DbSet<Parameter> Parameter { get; set; }
        public virtual DbSet<Person> Person { get; set; }
        public virtual DbSet<PersonnelActual> PersonnelActual { get; set; }
        public virtual DbSet<PersonnelActualProperty> PersonnelActualProperty { get; set; }
        public virtual DbSet<PersonnelCapability> PersonnelCapability { get; set; }
        public virtual DbSet<PersonnelCapabilityProperty> PersonnelCapabilityProperty { get; set; }
        public virtual DbSet<PersonnelClass> PersonnelClass { get; set; }
        public virtual DbSet<PersonnelClassProperty> PersonnelClassProperty { get; set; }
        public virtual DbSet<PersonnelIdentificationManifest> PersonnelIdentificationManifest { get; set; }
        public virtual DbSet<PersonnelInformation> PersonnelInformation { get; set; }
        public virtual DbSet<PersonnelRequirement> PersonnelRequirement { get; set; }
        public virtual DbSet<PersonnelRequirementProperty> PersonnelRequirementProperty { get; set; }
        public virtual DbSet<PersonnelSegmentSpecification> PersonnelSegmentSpecification { get; set; }
        public virtual DbSet<PersonnelSegmentSpecificationProperty> PersonnelSegmentSpecificationProperty { get; set; }
        public virtual DbSet<PersonnelSpecification> PersonnelSpecification { get; set; }
        public virtual DbSet<PersonnelSpecificationProperty> PersonnelSpecificationProperty { get; set; }
        public virtual DbSet<PersonProperty> PersonProperty { get; set; }
        public virtual DbSet<PhysicalAsset> PhysicalAsset { get; set; }
        public virtual DbSet<PhysicalAssetActual> PhysicalAssetActual { get; set; }
        public virtual DbSet<PhysicalAssetActualProperty> PhysicalAssetActualProperty { get; set; }
        public virtual DbSet<PhysicalAssetCapability> PhysicalAssetCapability { get; set; }
        public virtual DbSet<PhysicalAssetCapabilityProperty> PhysicalAssetCapabilityProperty { get; set; }
        public virtual DbSet<PhysicalAssetCapabilityTestSpesification> PhysicalAssetCapabilityTestSpesification { get; set; }
        public virtual DbSet<PhysicalAssetClass> PhysicalAssetClass { get; set; }
        public virtual DbSet<PhysicalAssetClassProperty> PhysicalAssetClassProperty { get; set; }
        public virtual DbSet<PhysicalAssetProperty> PhysicalAssetProperty { get; set; }
        public virtual DbSet<PhysicalAssetRequirement> PhysicalAssetRequirement { get; set; }
        public virtual DbSet<PhysicalAssetRequirementProperty> PhysicalAssetRequirementProperty { get; set; }
        public virtual DbSet<PhysicalAssetSegmentSpecification> PhysicalAssetSegmentSpecification { get; set; }
        public virtual DbSet<PhysicalAssetSegmentSpecificationProperty> PhysicalAssetSegmentSpecificationProperty { get; set; }
        public virtual DbSet<PhysicalAssetSpecification> PhysicalAssetSpecification { get; set; }
        public virtual DbSet<PhysicalAssetSpecificationProperty> PhysicalAssetSpecificationProperty { get; set; }
        public virtual DbSet<ProcedureChartElement> ProcedureChartElement { get; set; }
        public virtual DbSet<ProcedureLogic> ProcedureLogic { get; set; }
        public virtual DbSet<ProcessElement> ProcessElement { get; set; }
        public virtual DbSet<ProcessElementLibrary> ProcessElementLibrary { get; set; }
        public virtual DbSet<ProcessElementParameter> ProcessElementParameter { get; set; }
        public virtual DbSet<ProcessSegment> ProcessSegment { get; set; }
        public virtual DbSet<ProcessSegmentCapability> ProcessSegmentCapability { get; set; }
        public virtual DbSet<ProcessSegmentInformation> ProcessSegmentInformation { get; set; }
        public virtual DbSet<ProductDefinition> ProductDefinition { get; set; }
        public virtual DbSet<ProductDefinitionRecord> ProductDefinitionRecord { get; set; }
        public virtual DbSet<ProductInformation> ProductInformation { get; set; }
        public virtual DbSet<ProductionCapability> ProductionCapability { get; set; }
        public virtual DbSet<ProductionData> ProductionData { get; set; }
        public virtual DbSet<ProductionParameter> ProductionParameter { get; set; }
        public virtual DbSet<ProductionPerformance> ProductionPerformance { get; set; }
        public virtual DbSet<ProductionPerformanceRecord> ProductionPerformanceRecord { get; set; }
        public virtual DbSet<ProductionRequest> ProductionRequest { get; set; }
        public virtual DbSet<ProductionResponse> ProductionResponse { get; set; }
        public virtual DbSet<ProductionScedule> ProductionScedule { get; set; }
        public virtual DbSet<ProductionSceduleRecord> ProductionSceduleRecord { get; set; }
        public virtual DbSet<ProductProductionRuleIDGroup> ProductProductionRuleIDGroup { get; set; }
        public virtual DbSet<ProductSegment> ProductSegment { get; set; }
        public virtual DbSet<PropertyTypes> PropertyTypes { get; set; }
        public virtual DbSet<QualificationTestSpecification> QualificationTestSpecification { get; set; }
        public virtual DbSet<RecipeBuildingBlock> RecipeBuildingBlock { get; set; }
        public virtual DbSet<RecipeElement> RecipeElement { get; set; }
        public virtual DbSet<RecipeElementRecord> RecipeElementRecord { get; set; }
        public virtual DbSet<ResourceConstraint> ResourceConstraint { get; set; }
        public virtual DbSet<ResourceConstraintLibrary> ResourceConstraintLibrary { get; set; }
        public virtual DbSet<ResourceConstraintProperty> ResourceConstraintProperty { get; set; }
        public virtual DbSet<ResourceNetworkConnection> ResourceNetworkConnection { get; set; }
        public virtual DbSet<ResourceNetworkConnectionInformation> ResourceNetworkConnectionInformation { get; set; }
        public virtual DbSet<ResourceNetworkConnectionType> ResourceNetworkConnectionType { get; set; }
        public virtual DbSet<ResourceProperty> ResourceProperty { get; set; }
        public virtual DbSet<ResourceQualificationsManifest> ResourceQualificationsManifest { get; set; }
        public virtual DbSet<ResourceReference> ResourceReference { get; set; }
        public virtual DbSet<ResourceRelationshipNetwork> ResourceRelationshipNetwork { get; set; }
        public virtual DbSet<Sample> Sample { get; set; }
        public virtual DbSet<SampleTest> SampleTest { get; set; }
        public virtual DbSet<SampleTestResult> SampleTestResult { get; set; }
        public virtual DbSet<SegmentParameter> SegmentParameter { get; set; }
        public virtual DbSet<SegmentRequirement> SegmentRequirement { get; set; }
        public virtual DbSet<SegmentResponse> SegmentResponse { get; set; }
        public virtual DbSet<Step> Step { get; set; }
        public virtual DbSet<SupportedAction> SupportedAction { get; set; }
        public virtual DbSet<TagSpecification> TagSpecification { get; set; }
        public virtual DbSet<TestAccessRights> TestAccessRights { get; set; }
        public virtual DbSet<TestDataTypes> TestDataTypes { get; set; }
        public virtual DbSet<TimeSpecification> TimeSpecification { get; set; }
        public virtual DbSet<ToID> ToID { get; set; }
        public virtual DbSet<TransactionProfile> TransactionProfile { get; set; }
        public virtual DbSet<Transition> Transition { get; set; }
        public virtual DbSet<UserAttribute> UserAttribute { get; set; }
        public virtual DbSet<Value> Value { get; set; }
        public virtual DbSet<WorkAlert> WorkAlert { get; set; }
        public virtual DbSet<WorkAlertDefinition> WorkAlertDefinition { get; set; }
        public virtual DbSet<WorkAlertInformation> WorkAlertInformation { get; set; }
        public virtual DbSet<WorkAlertProperty> WorkAlertProperty { get; set; }
        public virtual DbSet<WorkCapability> WorkCapability { get; set; }
        public virtual DbSet<WorkCapabilityInformation> WorkCapabilityInformation { get; set; }
        public virtual DbSet<WorkDefinition> WorkDefinition { get; set; }
        public virtual DbSet<WorkDefinitionInformation> WorkDefinitionInformation { get; set; }
        public virtual DbSet<WorkDirective> WorkDirective { get; set; }
        public virtual DbSet<WorkDirectiveRecord> WorkDirectiveRecord { get; set; }
        public virtual DbSet<WorkflowSpecification> WorkflowSpecification { get; set; }
        public virtual DbSet<WorkflowSpecificationConnection> WorkflowSpecificationConnection { get; set; }
        public virtual DbSet<WorkflowSpecificationConnectionType> WorkflowSpecificationConnectionType { get; set; }
        public virtual DbSet<WorkflowSpecificationInformation> WorkflowSpecificationInformation { get; set; }
        public virtual DbSet<WorkflowSpecificationNode> WorkflowSpecificationNode { get; set; }
        public virtual DbSet<WorkflowSpecificationNodeType> WorkflowSpecificationNodeType { get; set; }
        public virtual DbSet<WorkflowSpecificationProperty> WorkflowSpecificationProperty { get; set; }
        public virtual DbSet<WorkflowSpecificationType> WorkflowSpecificationType { get; set; }
        public virtual DbSet<WorkMaster> WorkMaster { get; set; }
        public virtual DbSet<WorkMasterCapability> WorkMasterCapability { get; set; }
        public virtual DbSet<WorkMasterRecord> WorkMasterRecord { get; set; }
        public virtual DbSet<WorkPerformance> WorkPerformance { get; set; }
        public virtual DbSet<WorkPerformanceRecord> WorkPerformanceRecord { get; set; }
        public virtual DbSet<WorkRequest> WorkRequest { get; set; }
        public virtual DbSet<WorkResponse> WorkResponse { get; set; }
        public virtual DbSet<WorkSceduleRecord> WorkSceduleRecord { get; set; }
        public virtual DbSet<WorkSchedule> WorkSchedule { get; set; }
        public virtual DbSet<EquipmentAssetMapping> EquipmentAssetMapping { get; set; }
        public virtual DbSet<EquipmentInformation> EquipmentInformation { get; set; }
        public virtual DbSet<MarerialClassTR> MarerialClassTR { get; set; }
        public virtual DbSet<MaterialClassAssemblies> MaterialClassAssemblies { get; set; }
        public virtual DbSet<MaterialClassLinks> MaterialClassLinks { get; set; }
        public virtual DbSet<MaterialDefinitionAssemblies> MaterialDefinitionAssemblies { get; set; }
        public virtual DbSet<MaterialDefinitionLinks> MaterialDefinitionLinks { get; set; }
        public virtual DbSet<MaterialLotLinks> MaterialLotLinks { get; set; }
        public virtual DbSet<MaterialSubLotLinks> MaterialSubLotLinks { get; set; }
        public virtual DbSet<v_EquipmentProperty> v_EquipmentProperty { get; set; }
        public virtual DbSet<v_kep_logger> v_kep_logger { get; set; }
        public virtual DbSet<v_MaterialLot_Request> v_MaterialLot_Request { get; set; }
        public virtual DbSet<v_PrintProperties> v_PrintProperties { get; set; }
        public virtual DbSet<v_ProductionParameter_Files> v_ProductionParameter_Files { get; set; }
        public virtual DbSet<v_ProductionResponse> v_ProductionResponse { get; set; }
        public virtual DbSet<v_Property> v_Property { get; set; }
    
        [DbFunction("Entities", "get_Equipment")]
        public virtual IQueryable<get_Equipment_Result> get_Equipment(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_Equipment_Result>("[Entities].[get_Equipment](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_EquipmentClass")]
        public virtual IQueryable<get_EquipmentClass_Result> get_EquipmentClass(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_EquipmentClass_Result>("[Entities].[get_EquipmentClass](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_EquipmentClassProperty")]
        public virtual IQueryable<get_EquipmentClassProperty_Result> get_EquipmentClassProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_EquipmentClassProperty_Result>("[Entities].[get_EquipmentClassProperty](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_EquipmentProperty")]
        public virtual IQueryable<get_EquipmentProperty_Result> get_EquipmentProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_EquipmentProperty_Result>("[Entities].[get_EquipmentProperty](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_EquipmentRequirement")]
        public virtual IQueryable<get_EquipmentRequirement_Result> get_EquipmentRequirement(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_EquipmentRequirement_Result>("[Entities].[get_EquipmentRequirement](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_MaterialActual")]
        public virtual IQueryable<get_MaterialActual_Result> get_MaterialActual(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_MaterialActual_Result>("[Entities].[get_MaterialActual](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_MaterialDefinitionProperty")]
        public virtual IQueryable<get_MaterialDefinitionProperty_Result> get_MaterialDefinitionProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_MaterialDefinitionProperty_Result>("[Entities].[get_MaterialDefinitionProperty](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_MaterialLot")]
        public virtual IQueryable<get_MaterialLot_Result> get_MaterialLot(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_MaterialLot_Result>("[Entities].[get_MaterialLot](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_MaterialLotProperty")]
        public virtual IQueryable<get_MaterialLotProperty_Result> get_MaterialLotProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_MaterialLotProperty_Result>("[Entities].[get_MaterialLotProperty](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_ProductionParameter")]
        public virtual IQueryable<get_ProductionParameter_Result> get_ProductionParameter(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_ProductionParameter_Result>("[Entities].[get_ProductionParameter](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_ProductionRequest")]
        public virtual IQueryable<get_ProductionRequest_Result> get_ProductionRequest(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_ProductionRequest_Result>("[Entities].[get_ProductionRequest](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_ProductionResponse")]
        public virtual IQueryable<get_ProductionResponse_Result> get_ProductionResponse(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_ProductionResponse_Result>("[Entities].[get_ProductionResponse](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_PropertyTypes")]
        public virtual IQueryable<get_PropertyTypes_Result> get_PropertyTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_PropertyTypes_Result>("[Entities].[get_PropertyTypes](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_SegmentRequirement")]
        public virtual IQueryable<get_SegmentRequirement_Result> get_SegmentRequirement(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_SegmentRequirement_Result>("[Entities].[get_SegmentRequirement](@ID)", iDParameter);
        }
    
        [DbFunction("Entities", "get_SegmentResponse")]
        public virtual IQueryable<get_SegmentResponse_Result> get_SegmentResponse(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<get_SegmentResponse_Result>("[Entities].[get_SegmentResponse](@ID)", iDParameter);
        }
    
        public virtual int del_Equipment(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_Equipment", iDParameter);
        }
    
        public virtual int del_EquipmentClass(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_EquipmentClass", iDParameter);
        }
    
        public virtual int del_EquipmentClassProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_EquipmentClassProperty", iDParameter);
        }
    
        public virtual int del_EquipmentProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_EquipmentProperty", iDParameter);
        }
    
        public virtual int del_EquipmentRequirement(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_EquipmentRequirement", iDParameter);
        }
    
        public virtual int del_MaterialActual(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_MaterialActual", iDParameter);
        }
    
        public virtual int del_MaterialDefinitionProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_MaterialDefinitionProperty", iDParameter);
        }
    
        public virtual int del_MaterialLot(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_MaterialLot", iDParameter);
        }
    
        public virtual int del_MaterialLotProperty(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_MaterialLotProperty", iDParameter);
        }
    
        public virtual int del_ProductionParameter(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_ProductionParameter", iDParameter);
        }
    
        public virtual int del_ProductionRequest(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_ProductionRequest", iDParameter);
        }
    
        public virtual int del_ProductionResponse(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_ProductionResponse", iDParameter);
        }
    
        public virtual int del_PropertyTypes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_PropertyTypes", iDParameter);
        }
    
        public virtual int del_SegmentRequirement(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_SegmentRequirement", iDParameter);
        }
    
        public virtual int del_SegmentResponse(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("del_SegmentResponse", iDParameter);
        }
    
        public virtual int ins_Equipment(string description, Nullable<int> equipmentClassID, ObjectParameter equipmentID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var equipmentClassIDParameter = equipmentClassID.HasValue ?
                new ObjectParameter("EquipmentClassID", equipmentClassID) :
                new ObjectParameter("EquipmentClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_Equipment", descriptionParameter, equipmentClassIDParameter, equipmentID);
        }
    
        public virtual int ins_EquipmentClass(Nullable<int> parentID, string description, string location, Nullable<int> hierarchyScope, string equipmentLevel, ObjectParameter equipmentClassID)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var hierarchyScopeParameter = hierarchyScope.HasValue ?
                new ObjectParameter("HierarchyScope", hierarchyScope) :
                new ObjectParameter("HierarchyScope", typeof(int));
    
            var equipmentLevelParameter = equipmentLevel != null ?
                new ObjectParameter("EquipmentLevel", equipmentLevel) :
                new ObjectParameter("EquipmentLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_EquipmentClass", parentIDParameter, descriptionParameter, locationParameter, hierarchyScopeParameter, equipmentLevelParameter, equipmentClassID);
        }
    
        public virtual int ins_EquipmentClassProperty(string description, string value, Nullable<int> equipmentClassID, ObjectParameter equipmentClassPropertyID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var equipmentClassIDParameter = equipmentClassID.HasValue ?
                new ObjectParameter("EquipmentClassID", equipmentClassID) :
                new ObjectParameter("EquipmentClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_EquipmentClassProperty", descriptionParameter, valueParameter, equipmentClassIDParameter, equipmentClassPropertyID);
        }
    
        public virtual int ins_EquipmentProperty(string description, string value, Nullable<int> equipmentProperty, Nullable<int> equipmentID, Nullable<int> classPropertyID, ObjectParameter equipmentPropertyID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var equipmentPropertyParameter = equipmentProperty.HasValue ?
                new ObjectParameter("EquipmentProperty", equipmentProperty) :
                new ObjectParameter("EquipmentProperty", typeof(int));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(int));
    
            var classPropertyIDParameter = classPropertyID.HasValue ?
                new ObjectParameter("ClassPropertyID", classPropertyID) :
                new ObjectParameter("ClassPropertyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_EquipmentProperty", descriptionParameter, valueParameter, equipmentPropertyParameter, equipmentIDParameter, classPropertyIDParameter, equipmentPropertyID);
        }
    
        public virtual int ins_EquipmentRequirement(Nullable<int> equipmentClassID, Nullable<int> equipmentID, string description, Nullable<int> quantity, Nullable<int> segmentRequirementID, ObjectParameter equipmentRequirementID)
        {
            var equipmentClassIDParameter = equipmentClassID.HasValue ?
                new ObjectParameter("EquipmentClassID", equipmentClassID) :
                new ObjectParameter("EquipmentClassID", typeof(int));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var segmentRequirementIDParameter = segmentRequirementID.HasValue ?
                new ObjectParameter("SegmentRequirementID", segmentRequirementID) :
                new ObjectParameter("SegmentRequirementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_EquipmentRequirement", equipmentClassIDParameter, equipmentIDParameter, descriptionParameter, quantityParameter, segmentRequirementIDParameter, equipmentRequirementID);
        }
    
        public virtual int ins_MaterialActual(Nullable<int> materialLotID, string description, Nullable<int> quantity, Nullable<int> segmentResponseID, ObjectParameter materialActualID)
        {
            var materialLotIDParameter = materialLotID.HasValue ?
                new ObjectParameter("MaterialLotID", materialLotID) :
                new ObjectParameter("MaterialLotID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var segmentResponseIDParameter = segmentResponseID.HasValue ?
                new ObjectParameter("SegmentResponseID", segmentResponseID) :
                new ObjectParameter("SegmentResponseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_MaterialActual", materialLotIDParameter, descriptionParameter, quantityParameter, segmentResponseIDParameter, materialActualID);
        }
    
        public virtual int ins_MaterialDefinitionProperty(string description, string value, Nullable<int> classPropertyID, Nullable<int> propertyType, ObjectParameter materialDefinitionPropertyID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var classPropertyIDParameter = classPropertyID.HasValue ?
                new ObjectParameter("ClassPropertyID", classPropertyID) :
                new ObjectParameter("ClassPropertyID", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_MaterialDefinitionProperty", descriptionParameter, valueParameter, classPropertyIDParameter, propertyTypeParameter, materialDefinitionPropertyID);
        }
    
        public virtual int ins_MaterialLot(string description, string status, Nullable<int> quantity, ObjectParameter materialLotID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_MaterialLot", descriptionParameter, statusParameter, quantityParameter, materialLotID);
        }
    
        public virtual int ins_MaterialLotByController(Nullable<int> controllerID)
        {
            var controllerIDParameter = controllerID.HasValue ?
                new ObjectParameter("ControllerID", controllerID) :
                new ObjectParameter("ControllerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_MaterialLotByController", controllerIDParameter);
        }
    
        public virtual int ins_MaterialLotProperty(string description, string value, Nullable<int> materialLotProperty, Nullable<int> materialLotID, Nullable<int> definitionPropertyID, Nullable<int> propertyType, ObjectParameter materialLotPropertyID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var materialLotPropertyParameter = materialLotProperty.HasValue ?
                new ObjectParameter("MaterialLotProperty", materialLotProperty) :
                new ObjectParameter("MaterialLotProperty", typeof(int));
    
            var materialLotIDParameter = materialLotID.HasValue ?
                new ObjectParameter("MaterialLotID", materialLotID) :
                new ObjectParameter("MaterialLotID", typeof(int));
    
            var definitionPropertyIDParameter = definitionPropertyID.HasValue ?
                new ObjectParameter("DefinitionPropertyID", definitionPropertyID) :
                new ObjectParameter("DefinitionPropertyID", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_MaterialLotProperty", descriptionParameter, valueParameter, materialLotPropertyParameter, materialLotIDParameter, definitionPropertyIDParameter, propertyTypeParameter, materialLotPropertyID);
        }
    
        public virtual int ins_ProductionParameter(Nullable<int> productSegmentID, Nullable<int> processSegmentID, string parameter, Nullable<int> propertyType, ObjectParameter productionParameterID)
        {
            var productSegmentIDParameter = productSegmentID.HasValue ?
                new ObjectParameter("ProductSegmentID", productSegmentID) :
                new ObjectParameter("ProductSegmentID", typeof(int));
    
            var processSegmentIDParameter = processSegmentID.HasValue ?
                new ObjectParameter("ProcessSegmentID", processSegmentID) :
                new ObjectParameter("ProcessSegmentID", typeof(int));
    
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_ProductionParameter", productSegmentIDParameter, processSegmentIDParameter, parameterParameter, propertyTypeParameter, productionParameterID);
        }
    
        public virtual int ins_ProductionRequest(string description, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string priority, string requestState, Nullable<int> productionSchedule, ObjectParameter productionRequestID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var requestStateParameter = requestState != null ?
                new ObjectParameter("RequestState", requestState) :
                new ObjectParameter("RequestState", typeof(string));
    
            var productionScheduleParameter = productionSchedule.HasValue ?
                new ObjectParameter("ProductionSchedule", productionSchedule) :
                new ObjectParameter("ProductionSchedule", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_ProductionRequest", descriptionParameter, startTimeParameter, endTimeParameter, priorityParameter, requestStateParameter, productionScheduleParameter, productionRequestID);
        }
    
        public virtual int ins_ProductionResponse(Nullable<int> productionRequestID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string responseState, ObjectParameter productionResponseID)
        {
            var productionRequestIDParameter = productionRequestID.HasValue ?
                new ObjectParameter("ProductionRequestID", productionRequestID) :
                new ObjectParameter("ProductionRequestID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var responseStateParameter = responseState != null ?
                new ObjectParameter("ResponseState", responseState) :
                new ObjectParameter("ResponseState", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_ProductionResponse", productionRequestIDParameter, startTimeParameter, endTimeParameter, responseStateParameter, productionResponseID);
        }
    
        public virtual int ins_PropertyTypes(string description, ObjectParameter propertyTypesID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_PropertyTypes", descriptionParameter, propertyTypesID);
        }
    
        public virtual int ins_SegmentRequirement(Nullable<int> productSegmentID, Nullable<int> processSegmentID, string description, Nullable<System.DateTime> earliestStartTime, Nullable<System.DateTime> latestEndTime, string duration, Nullable<int> productionParameter, Nullable<int> segmentRequirement, string seqmentState, Nullable<int> productionRequest, ObjectParameter segmentRequirementID)
        {
            var productSegmentIDParameter = productSegmentID.HasValue ?
                new ObjectParameter("ProductSegmentID", productSegmentID) :
                new ObjectParameter("ProductSegmentID", typeof(int));
    
            var processSegmentIDParameter = processSegmentID.HasValue ?
                new ObjectParameter("ProcessSegmentID", processSegmentID) :
                new ObjectParameter("ProcessSegmentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var earliestStartTimeParameter = earliestStartTime.HasValue ?
                new ObjectParameter("EarliestStartTime", earliestStartTime) :
                new ObjectParameter("EarliestStartTime", typeof(System.DateTime));
    
            var latestEndTimeParameter = latestEndTime.HasValue ?
                new ObjectParameter("LatestEndTime", latestEndTime) :
                new ObjectParameter("LatestEndTime", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var productionParameterParameter = productionParameter.HasValue ?
                new ObjectParameter("ProductionParameter", productionParameter) :
                new ObjectParameter("ProductionParameter", typeof(int));
    
            var segmentRequirementParameter = segmentRequirement.HasValue ?
                new ObjectParameter("SegmentRequirement", segmentRequirement) :
                new ObjectParameter("SegmentRequirement", typeof(int));
    
            var seqmentStateParameter = seqmentState != null ?
                new ObjectParameter("SeqmentState", seqmentState) :
                new ObjectParameter("SeqmentState", typeof(string));
    
            var productionRequestParameter = productionRequest.HasValue ?
                new ObjectParameter("ProductionRequest", productionRequest) :
                new ObjectParameter("ProductionRequest", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_SegmentRequirement", productSegmentIDParameter, processSegmentIDParameter, descriptionParameter, earliestStartTimeParameter, latestEndTimeParameter, durationParameter, productionParameterParameter, segmentRequirementParameter, seqmentStateParameter, productionRequestParameter, segmentRequirementID);
        }
    
        public virtual int ins_SegmentResponse(string description, Nullable<System.DateTime> actualStartTime, Nullable<System.DateTime> actualEndTime, string segmentState, Nullable<int> productionRequest, Nullable<int> productionResponse, ObjectParameter segmentResponseID)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var actualStartTimeParameter = actualStartTime.HasValue ?
                new ObjectParameter("ActualStartTime", actualStartTime) :
                new ObjectParameter("ActualStartTime", typeof(System.DateTime));
    
            var actualEndTimeParameter = actualEndTime.HasValue ?
                new ObjectParameter("ActualEndTime", actualEndTime) :
                new ObjectParameter("ActualEndTime", typeof(System.DateTime));
    
            var segmentStateParameter = segmentState != null ?
                new ObjectParameter("SegmentState", segmentState) :
                new ObjectParameter("SegmentState", typeof(string));
    
            var productionRequestParameter = productionRequest.HasValue ?
                new ObjectParameter("ProductionRequest", productionRequest) :
                new ObjectParameter("ProductionRequest", typeof(int));
    
            var productionResponseParameter = productionResponse.HasValue ?
                new ObjectParameter("ProductionResponse", productionResponse) :
                new ObjectParameter("ProductionResponse", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ins_SegmentResponse", descriptionParameter, actualStartTimeParameter, actualEndTimeParameter, segmentStateParameter, productionRequestParameter, productionResponseParameter, segmentResponseID);
        }
    
        public virtual int upd_Equipment(Nullable<int> iD, string description, Nullable<int> equipmentClassID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var equipmentClassIDParameter = equipmentClassID.HasValue ?
                new ObjectParameter("EquipmentClassID", equipmentClassID) :
                new ObjectParameter("EquipmentClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_Equipment", iDParameter, descriptionParameter, equipmentClassIDParameter);
        }
    
        public virtual int upd_EquipmentClass(Nullable<int> iD, Nullable<int> parentID, string description, string location, Nullable<int> hierarchyScope, string equipmentLevel)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var hierarchyScopeParameter = hierarchyScope.HasValue ?
                new ObjectParameter("HierarchyScope", hierarchyScope) :
                new ObjectParameter("HierarchyScope", typeof(int));
    
            var equipmentLevelParameter = equipmentLevel != null ?
                new ObjectParameter("EquipmentLevel", equipmentLevel) :
                new ObjectParameter("EquipmentLevel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_EquipmentClass", iDParameter, parentIDParameter, descriptionParameter, locationParameter, hierarchyScopeParameter, equipmentLevelParameter);
        }
    
        public virtual int upd_EquipmentClassProperty(Nullable<int> iD, string description, string value, Nullable<int> equipmentClassID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var equipmentClassIDParameter = equipmentClassID.HasValue ?
                new ObjectParameter("EquipmentClassID", equipmentClassID) :
                new ObjectParameter("EquipmentClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_EquipmentClassProperty", iDParameter, descriptionParameter, valueParameter, equipmentClassIDParameter);
        }
    
        public virtual int upd_EquipmentProperty(Nullable<int> iD, string description, string value, Nullable<int> equipmentProperty, Nullable<int> equipmentID, Nullable<int> classPropertyID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var equipmentPropertyParameter = equipmentProperty.HasValue ?
                new ObjectParameter("EquipmentProperty", equipmentProperty) :
                new ObjectParameter("EquipmentProperty", typeof(int));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(int));
    
            var classPropertyIDParameter = classPropertyID.HasValue ?
                new ObjectParameter("ClassPropertyID", classPropertyID) :
                new ObjectParameter("ClassPropertyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_EquipmentProperty", iDParameter, descriptionParameter, valueParameter, equipmentPropertyParameter, equipmentIDParameter, classPropertyIDParameter);
        }
    
        public virtual int upd_EquipmentRequirement(Nullable<int> iD, Nullable<int> equipmentClassID, Nullable<int> equipmentID, string description, Nullable<int> quantity, Nullable<int> segmentRequirementID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var equipmentClassIDParameter = equipmentClassID.HasValue ?
                new ObjectParameter("EquipmentClassID", equipmentClassID) :
                new ObjectParameter("EquipmentClassID", typeof(int));
    
            var equipmentIDParameter = equipmentID.HasValue ?
                new ObjectParameter("EquipmentID", equipmentID) :
                new ObjectParameter("EquipmentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var segmentRequirementIDParameter = segmentRequirementID.HasValue ?
                new ObjectParameter("SegmentRequirementID", segmentRequirementID) :
                new ObjectParameter("SegmentRequirementID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_EquipmentRequirement", iDParameter, equipmentClassIDParameter, equipmentIDParameter, descriptionParameter, quantityParameter, segmentRequirementIDParameter);
        }
    
        public virtual int upd_MaterialActual(Nullable<int> iD, Nullable<int> materialLotID, string description, Nullable<int> quantity, Nullable<int> segmentResponseID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var materialLotIDParameter = materialLotID.HasValue ?
                new ObjectParameter("MaterialLotID", materialLotID) :
                new ObjectParameter("MaterialLotID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var segmentResponseIDParameter = segmentResponseID.HasValue ?
                new ObjectParameter("SegmentResponseID", segmentResponseID) :
                new ObjectParameter("SegmentResponseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_MaterialActual", iDParameter, materialLotIDParameter, descriptionParameter, quantityParameter, segmentResponseIDParameter);
        }
    
        public virtual int upd_MaterialDefinitionProperty(Nullable<int> iD, string description, string value, Nullable<int> classPropertyID, Nullable<int> propertyType)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var classPropertyIDParameter = classPropertyID.HasValue ?
                new ObjectParameter("ClassPropertyID", classPropertyID) :
                new ObjectParameter("ClassPropertyID", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_MaterialDefinitionProperty", iDParameter, descriptionParameter, valueParameter, classPropertyIDParameter, propertyTypeParameter);
        }
    
        public virtual int upd_MaterialLot(Nullable<int> iD, string description, string status, Nullable<int> quantity)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_MaterialLot", iDParameter, descriptionParameter, statusParameter, quantityParameter);
        }
    
        public virtual int upd_MaterialLotProperty(Nullable<int> iD, string description, string value, Nullable<int> materialLotProperty, Nullable<int> materialLotID, Nullable<int> definitionPropertyID, Nullable<int> propertyType)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var materialLotPropertyParameter = materialLotProperty.HasValue ?
                new ObjectParameter("MaterialLotProperty", materialLotProperty) :
                new ObjectParameter("MaterialLotProperty", typeof(int));
    
            var materialLotIDParameter = materialLotID.HasValue ?
                new ObjectParameter("MaterialLotID", materialLotID) :
                new ObjectParameter("MaterialLotID", typeof(int));
    
            var definitionPropertyIDParameter = definitionPropertyID.HasValue ?
                new ObjectParameter("DefinitionPropertyID", definitionPropertyID) :
                new ObjectParameter("DefinitionPropertyID", typeof(int));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_MaterialLotProperty", iDParameter, descriptionParameter, valueParameter, materialLotPropertyParameter, materialLotIDParameter, definitionPropertyIDParameter, propertyTypeParameter);
        }
    
        public virtual int upd_ProductionParameter(Nullable<int> iD, Nullable<int> productSegmentID, Nullable<int> processSegmentID, string parameter, Nullable<int> propertyType)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productSegmentIDParameter = productSegmentID.HasValue ?
                new ObjectParameter("ProductSegmentID", productSegmentID) :
                new ObjectParameter("ProductSegmentID", typeof(int));
    
            var processSegmentIDParameter = processSegmentID.HasValue ?
                new ObjectParameter("ProcessSegmentID", processSegmentID) :
                new ObjectParameter("ProcessSegmentID", typeof(int));
    
            var parameterParameter = parameter != null ?
                new ObjectParameter("Parameter", parameter) :
                new ObjectParameter("Parameter", typeof(string));
    
            var propertyTypeParameter = propertyType.HasValue ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_ProductionParameter", iDParameter, productSegmentIDParameter, processSegmentIDParameter, parameterParameter, propertyTypeParameter);
        }
    
        public virtual int upd_ProductionRequest(Nullable<int> iD, string description, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string priority, string requestState, Nullable<int> productionSchedule)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(string));
    
            var requestStateParameter = requestState != null ?
                new ObjectParameter("RequestState", requestState) :
                new ObjectParameter("RequestState", typeof(string));
    
            var productionScheduleParameter = productionSchedule.HasValue ?
                new ObjectParameter("ProductionSchedule", productionSchedule) :
                new ObjectParameter("ProductionSchedule", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_ProductionRequest", iDParameter, descriptionParameter, startTimeParameter, endTimeParameter, priorityParameter, requestStateParameter, productionScheduleParameter);
        }
    
        public virtual int upd_ProductionResponse(Nullable<int> iD, Nullable<int> productionRequestID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, string responseState)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productionRequestIDParameter = productionRequestID.HasValue ?
                new ObjectParameter("ProductionRequestID", productionRequestID) :
                new ObjectParameter("ProductionRequestID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var responseStateParameter = responseState != null ?
                new ObjectParameter("ResponseState", responseState) :
                new ObjectParameter("ResponseState", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_ProductionResponse", iDParameter, productionRequestIDParameter, startTimeParameter, endTimeParameter, responseStateParameter);
        }
    
        public virtual int upd_PropertyTypes(Nullable<int> iD, string description)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_PropertyTypes", iDParameter, descriptionParameter);
        }
    
        public virtual int upd_SegmentRequirement(Nullable<int> iD, Nullable<int> productSegmentID, Nullable<int> processSegmentID, string description, Nullable<System.DateTime> earliestStartTime, Nullable<System.DateTime> latestEndTime, string duration, Nullable<int> productionParameter, Nullable<int> segmentRequirement, string seqmentState, Nullable<int> productionRequest)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var productSegmentIDParameter = productSegmentID.HasValue ?
                new ObjectParameter("ProductSegmentID", productSegmentID) :
                new ObjectParameter("ProductSegmentID", typeof(int));
    
            var processSegmentIDParameter = processSegmentID.HasValue ?
                new ObjectParameter("ProcessSegmentID", processSegmentID) :
                new ObjectParameter("ProcessSegmentID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var earliestStartTimeParameter = earliestStartTime.HasValue ?
                new ObjectParameter("EarliestStartTime", earliestStartTime) :
                new ObjectParameter("EarliestStartTime", typeof(System.DateTime));
    
            var latestEndTimeParameter = latestEndTime.HasValue ?
                new ObjectParameter("LatestEndTime", latestEndTime) :
                new ObjectParameter("LatestEndTime", typeof(System.DateTime));
    
            var durationParameter = duration != null ?
                new ObjectParameter("Duration", duration) :
                new ObjectParameter("Duration", typeof(string));
    
            var productionParameterParameter = productionParameter.HasValue ?
                new ObjectParameter("ProductionParameter", productionParameter) :
                new ObjectParameter("ProductionParameter", typeof(int));
    
            var segmentRequirementParameter = segmentRequirement.HasValue ?
                new ObjectParameter("SegmentRequirement", segmentRequirement) :
                new ObjectParameter("SegmentRequirement", typeof(int));
    
            var seqmentStateParameter = seqmentState != null ?
                new ObjectParameter("SeqmentState", seqmentState) :
                new ObjectParameter("SeqmentState", typeof(string));
    
            var productionRequestParameter = productionRequest.HasValue ?
                new ObjectParameter("ProductionRequest", productionRequest) :
                new ObjectParameter("ProductionRequest", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_SegmentRequirement", iDParameter, productSegmentIDParameter, processSegmentIDParameter, descriptionParameter, earliestStartTimeParameter, latestEndTimeParameter, durationParameter, productionParameterParameter, segmentRequirementParameter, seqmentStateParameter, productionRequestParameter);
        }
    
        public virtual int upd_SegmentResponse(Nullable<int> iD, string description, Nullable<System.DateTime> actualStartTime, Nullable<System.DateTime> actualEndTime, string segmentState, Nullable<int> productionRequest, Nullable<int> productionResponse)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var actualStartTimeParameter = actualStartTime.HasValue ?
                new ObjectParameter("ActualStartTime", actualStartTime) :
                new ObjectParameter("ActualStartTime", typeof(System.DateTime));
    
            var actualEndTimeParameter = actualEndTime.HasValue ?
                new ObjectParameter("ActualEndTime", actualEndTime) :
                new ObjectParameter("ActualEndTime", typeof(System.DateTime));
    
            var segmentStateParameter = segmentState != null ?
                new ObjectParameter("SegmentState", segmentState) :
                new ObjectParameter("SegmentState", typeof(string));
    
            var productionRequestParameter = productionRequest.HasValue ?
                new ObjectParameter("ProductionRequest", productionRequest) :
                new ObjectParameter("ProductionRequest", typeof(int));
    
            var productionResponseParameter = productionResponse.HasValue ?
                new ObjectParameter("ProductionResponse", productionResponse) :
                new ObjectParameter("ProductionResponse", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("upd_SegmentResponse", iDParameter, descriptionParameter, actualStartTimeParameter, actualEndTimeParameter, segmentStateParameter, productionRequestParameter, productionResponseParameter);
        }
    }
}
